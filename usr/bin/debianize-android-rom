#! /bin/bash
DISK=$(find /dev/disk/by-label/ -type l -name "*")
echo $DISK
DRIVE="unset"
DEVICE="unset"
WD=$(pwd)
NEWINITRAMFS="$WD/new_initramfs"
select_drive(){
	cd "$WD"
	title='Which SD card do you want to format for your Android root?'
	prompt="Pick an option:"
	options=$1
	c=0
	for o in $options; do
	    options_list="$o
$options_list"
	    c=$((c+1))
	done
	echo "$title
	$prompt
	"
	PS3="$prompt "
	select opt in "${options[@]}" "Quit"; do 
	    case "$REPLY" in
	    1 ) export DRIVE="$opt" && break;;
	    2 ) export DRIVE="$opt" && break;;
	    3 ) export DRIVE="$opt" && break;;
	    4 ) export DRIVE="$opt" && break;;
	    5 ) export DRIVE="$opt" && break;;
	    6 ) export DRIVE="$opt" && break;;
	    7 ) export DRIVE="$opt" && break;;
	    8 ) export DRIVE="$opt" && break;;
	    9 ) export DRIVE="$opt" && break;;
            $(( ${#options[@]}+1 )) ) export DRIVE="QUIT" && echo "Goodbye!"; break;;
	    *) export DRIVE="Invalid option.";continue;;
	    esac
	done
	cd "$WD"
}
check_drive(){
	cd "$WD"
	if [ "$DRIVE" == "QUIT" ]; then
	    exit 0
	else
	    echo "$DRIVE"
	fi
	cd "$WD"
}
make_aligned_partitions(){
	cd "$WD"
	echo "make aligned partitions"
	PARTITIONONE=${DEVICE%?}"1"
	PARTITIONTWO=${DEVICE%?}"2"
	echo $PARTITIONONE
	echo $PARTITIONTWO
	mkfs -t vfat $PARTITIONONE
	mkfs -t ext4 $PARTITIONTWO
}
format_drive(){
	cd "$WD"
	DEVICE=$(readlink -f "$DRIVE")
	echo "ATTENTION!!! This could possibly disable part of your system if
you have selected the incorrect drive. Please verify that you wish to format
	$DRIVE		$DEVICE
before continuing.
"
	read -p "	Is this the correct device(Y/N)? " -n 1 -r
	echo    # (optional) move to a new line
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    make_aligned_partitions
	else
	    echo "User cancelled, incorrect disk."
	    exit 0
	fi
	cd "$WD"
}
modify_initramfs(){
	cd "$WD"
	ANDROID_SDCARD=$(adb shell mount | grep "/mnt/sdcard")
	DELIM="\\*:*\\"
	POINT_TO_INITRAMFS=${ANDROID_SDCARD#"${ANDROID_SDCARD%%DELIM*}"}
	TMP_INITRAMFS=$(echo $POINT_TO_INITRAMFS | tr ":" "\n")
	FIND_INITRAMFS=$(adb shell "ls -l /dev/block" | grep $TMP_INITRAMFS[1])
	ANDROID_INITRAMFS=$(echo $FIND_INITRAMFS | tr " " "\n")
	SLASHINIT="#!/sbin/busybox sh
# initramfs pre-boot init script
# Mount the /proc and /sys filesystems
/sbin/busybox mount -t proc none /proc
/sbin/busybox mount -t sysfs none /sys
/sbin/busybox mount -t tmpfs none /dev
# Something (what?) needs a few cycles here
/sbin/busybox sleep 1
# Populate /dev
/sbin/busybox mdev -s
# Mount the root filesystem, second partition on micro SDcard
/sbin/busybox mount -t ext4 -o noatime,nodiratime,errors=panic /dev/mmcblk1p2 /mnt/root
# Clean up
/sbin/busybox umount /proc
/sbin/busybox umount /sys
/sbin/busybox umount /dev
# Transfer root to SDcard
exec /sbin/busybox switch_root /mnt/root /etc/init
"
#$ANDROID_INITRAMFS[8]
	mkdir $NEWINITRAMFS && cd $NEWINITRAMFS && mkdir -p proc sys dev mnt/root sbin
	echo "$SLASHINIT" > init
	export ARCH="arm"
	export CROSS_COMPILE="arm-linux-gnueabihf-"
	apt-get source -b busybox-static:armhf
	apt-get 
	cp busybox*/build/static/busybox sbin/busybox
	chmod a+x init sbin/busybox
	find . | cpio --quiet -H newc -o | gzip > ../initramfs.cpio.gz
	cd ..
	if [ -f boot.img ]; then
	    abootimg -x boot.img
	    if [ -f linux-source-3.16.tar.xz ]; then
	        tar xf /usr/src/linux-source-3.16.tar.xz
	        export $($WD/linux-source-3.16/scripts/extract-ikconfig zImage | grep PHYS_OFFSET)
	    fi
	else
	    echo "Error, original kernel not found. Place boot.img in working directory."
	    exit 1
	fi
	abootimg -u boot.img -c [ "CONFIG_PHYS_OFFSET=$PHYS_OFFSET" ] -k zImage -r initramfs.cpio.gz
	cd "$WD"
}
armdebootstrap(){
cd "$WD"
mkdir -p cd "$WD/.mnt/debian"
PARTITIONTWO=${DEVICE%?}"2"
mount -t ext4 $PARTITIONTWO "$WD/.mnt/debian"
debootstrap --verbose --arch armhf --foreign jessie "$WD/.mnt/debian" http://ftp.se.debian.org/debian
umount "$WD/.mnt/debian"
cd "$WD"
}
clear
select_drive $DISK
check_drive
format_drive
modify_initramfs
armdebootstrap